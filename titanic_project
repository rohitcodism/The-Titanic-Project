{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-02T16:18:42.335893Z","iopub.execute_input":"2024-08-02T16:18:42.336317Z","iopub.status.idle":"2024-08-02T16:18:43.666135Z","shell.execute_reply.started":"2024-08-02T16:18:42.336282Z","shell.execute_reply":"2024-08-02T16:18:43.664702Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/titanic/train.csv\n/kaggle/input/titanic/test.csv\n/kaggle/input/titanic/gender_submission.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Importing necessary libraries","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:18:43.668382Z","iopub.execute_input":"2024-08-02T16:18:43.669019Z","iopub.status.idle":"2024-08-02T16:18:45.163080Z","shell.execute_reply.started":"2024-08-02T16:18:43.668976Z","shell.execute_reply":"2024-08-02T16:18:45.161749Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":"# Loading the Dataset\n* train_data -> train.csv\n* test_data -> test.csv","metadata":{}},{"cell_type":"code","source":"train_data = pd.read_csv('/kaggle/input/titanic/train.csv')\ntest_data = pd.read_csv('/kaggle/input/titanic/test.csv')","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:18:48.258669Z","iopub.execute_input":"2024-08-02T16:18:48.259441Z","iopub.status.idle":"2024-08-02T16:18:48.300085Z","shell.execute_reply.started":"2024-08-02T16:18:48.259376Z","shell.execute_reply":"2024-08-02T16:18:48.298658Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"train_df = pd.DataFrame(train_data)\ntest_df = pd.DataFrame(test_data)\ntest_df_2 = pd.DataFrame(test_data)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:18:49.090441Z","iopub.execute_input":"2024-08-02T16:18:49.090879Z","iopub.status.idle":"2024-08-02T16:18:49.097605Z","shell.execute_reply.started":"2024-08-02T16:18:49.090847Z","shell.execute_reply":"2024-08-02T16:18:49.096186Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"train_df","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:18:50.376258Z","iopub.execute_input":"2024-08-02T16:18:50.376712Z","iopub.status.idle":"2024-08-02T16:18:50.429677Z","shell.execute_reply.started":"2024-08-02T16:18:50.376678Z","shell.execute_reply":"2024-08-02T16:18:50.427370Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"     PassengerId  Survived  Pclass  \\\n0              1         0       3   \n1              2         1       1   \n2              3         1       3   \n3              4         1       1   \n4              5         0       3   \n..           ...       ...     ...   \n886          887         0       2   \n887          888         1       1   \n888          889         0       3   \n889          890         1       1   \n890          891         0       3   \n\n                                                  Name     Sex   Age  SibSp  \\\n0                              Braund, Mr. Owen Harris    male  22.0      1   \n1    Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                               Heikkinen, Miss. Laina  female  26.0      0   \n3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                             Allen, Mr. William Henry    male  35.0      0   \n..                                                 ...     ...   ...    ...   \n886                              Montvila, Rev. Juozas    male  27.0      0   \n887                       Graham, Miss. Margaret Edith  female  19.0      0   \n888           Johnston, Miss. Catherine Helen \"Carrie\"  female   NaN      1   \n889                              Behr, Mr. Karl Howell    male  26.0      0   \n890                                Dooley, Mr. Patrick    male  32.0      0   \n\n     Parch            Ticket     Fare Cabin Embarked  \n0        0         A/5 21171   7.2500   NaN        S  \n1        0          PC 17599  71.2833   C85        C  \n2        0  STON/O2. 3101282   7.9250   NaN        S  \n3        0            113803  53.1000  C123        S  \n4        0            373450   8.0500   NaN        S  \n..     ...               ...      ...   ...      ...  \n886      0            211536  13.0000   NaN        S  \n887      0            112053  30.0000   B42        S  \n888      2        W./C. 6607  23.4500   NaN        S  \n889      0            111369  30.0000  C148        C  \n890      0            370376   7.7500   NaN        Q  \n\n[891 rows x 12 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>886</th>\n      <td>887</td>\n      <td>0</td>\n      <td>2</td>\n      <td>Montvila, Rev. Juozas</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>211536</td>\n      <td>13.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>887</th>\n      <td>888</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Graham, Miss. Margaret Edith</td>\n      <td>female</td>\n      <td>19.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>112053</td>\n      <td>30.0000</td>\n      <td>B42</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>888</th>\n      <td>889</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n      <td>female</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>2</td>\n      <td>W./C. 6607</td>\n      <td>23.4500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>889</th>\n      <td>890</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Behr, Mr. Karl Howell</td>\n      <td>male</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>111369</td>\n      <td>30.0000</td>\n      <td>C148</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>890</th>\n      <td>891</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Dooley, Mr. Patrick</td>\n      <td>male</td>\n      <td>32.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>370376</td>\n      <td>7.7500</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n  </tbody>\n</table>\n<p>891 rows × 12 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Exploring the dataset","metadata":{}},{"cell_type":"code","source":"train_df.columns","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:18:57.050705Z","iopub.execute_input":"2024-08-02T16:18:57.051910Z","iopub.status.idle":"2024-08-02T16:18:57.059665Z","shell.execute_reply.started":"2024-08-02T16:18:57.051871Z","shell.execute_reply":"2024-08-02T16:18:57.058208Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'],\n      dtype='object')"},"metadata":{}}]},{"cell_type":"code","source":"train_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:18:57.731483Z","iopub.execute_input":"2024-08-02T16:18:57.732211Z","iopub.status.idle":"2024-08-02T16:18:57.757239Z","shell.execute_reply.started":"2024-08-02T16:18:57.732169Z","shell.execute_reply":"2024-08-02T16:18:57.755960Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          714 non-null    float64\n 6   SibSp        891 non-null    int64  \n 7   Parch        891 non-null    int64  \n 8   Ticket       891 non-null    object \n 9   Fare         891 non-null    float64\n 10  Cabin        204 non-null    object \n 11  Embarked     889 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"train_df.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:18:58.580935Z","iopub.execute_input":"2024-08-02T16:18:58.581353Z","iopub.status.idle":"2024-08-02T16:18:58.589675Z","shell.execute_reply.started":"2024-08-02T16:18:58.581320Z","shell.execute_reply":"2024-08-02T16:18:58.588441Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"(891, 12)"},"metadata":{}}]},{"cell_type":"markdown","source":"# Cleaning Dataset\n* handling ` na ` values","metadata":{}},{"cell_type":"code","source":"train_df.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-01T19:46:54.295956Z","iopub.execute_input":"2024-08-01T19:46:54.297164Z","iopub.status.idle":"2024-08-01T19:46:54.307502Z","shell.execute_reply.started":"2024-08-01T19:46:54.297124Z","shell.execute_reply":"2024-08-01T19:46:54.306086Z"},"trusted":true},"execution_count":400,"outputs":[{"execution_count":400,"output_type":"execute_result","data":{"text/plain":"PassengerId      0\nSurvived         0\nPclass           0\nName             0\nSex              0\nAge            177\nSibSp            0\nParch            0\nTicket           0\nFare             0\nCabin          687\nEmbarked         2\ndtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"## Cleaning the ` Age ` Column","metadata":{}},{"cell_type":"code","source":"print(train_df['Age'].isna().sum())\nprint(test_df['Age'].isna().sum())","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:19:03.135252Z","iopub.execute_input":"2024-08-02T16:19:03.135756Z","iopub.status.idle":"2024-08-02T16:19:03.144044Z","shell.execute_reply.started":"2024-08-02T16:19:03.135717Z","shell.execute_reply":"2024-08-02T16:19:03.142595Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"177\n86\n","output_type":"stream"}]},{"cell_type":"code","source":"train_df['Age'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:19:04.180114Z","iopub.execute_input":"2024-08-02T16:19:04.180607Z","iopub.status.idle":"2024-08-02T16:19:04.194670Z","shell.execute_reply.started":"2024-08-02T16:19:04.180565Z","shell.execute_reply":"2024-08-02T16:19:04.192822Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"Age\n24.00    30\n22.00    27\n18.00    26\n19.00    25\n28.00    25\n         ..\n36.50     1\n55.50     1\n0.92      1\n23.50     1\n74.00     1\nName: count, Length: 88, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"test_df['Age'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:19:05.290539Z","iopub.execute_input":"2024-08-02T16:19:05.290979Z","iopub.status.idle":"2024-08-02T16:19:05.301887Z","shell.execute_reply.started":"2024-08-02T16:19:05.290939Z","shell.execute_reply":"2024-08-02T16:19:05.300485Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"Age\n21.0    17\n24.0    17\n22.0    16\n30.0    15\n18.0    13\n        ..\n76.0     1\n28.5     1\n22.5     1\n62.0     1\n38.5     1\nName: count, Length: 79, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"train_df['Age'].unique()","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:19:06.319654Z","iopub.execute_input":"2024-08-02T16:19:06.320019Z","iopub.status.idle":"2024-08-02T16:19:06.331195Z","shell.execute_reply.started":"2024-08-02T16:19:06.319992Z","shell.execute_reply":"2024-08-02T16:19:06.329799Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"array([22.  , 38.  , 26.  , 35.  ,   nan, 54.  ,  2.  , 27.  , 14.  ,\n        4.  , 58.  , 20.  , 39.  , 55.  , 31.  , 34.  , 15.  , 28.  ,\n        8.  , 19.  , 40.  , 66.  , 42.  , 21.  , 18.  ,  3.  ,  7.  ,\n       49.  , 29.  , 65.  , 28.5 ,  5.  , 11.  , 45.  , 17.  , 32.  ,\n       16.  , 25.  ,  0.83, 30.  , 33.  , 23.  , 24.  , 46.  , 59.  ,\n       71.  , 37.  , 47.  , 14.5 , 70.5 , 32.5 , 12.  ,  9.  , 36.5 ,\n       51.  , 55.5 , 40.5 , 44.  ,  1.  , 61.  , 56.  , 50.  , 36.  ,\n       45.5 , 20.5 , 62.  , 41.  , 52.  , 63.  , 23.5 ,  0.92, 43.  ,\n       60.  , 10.  , 64.  , 13.  , 48.  ,  0.75, 53.  , 57.  , 80.  ,\n       70.  , 24.5 ,  6.  ,  0.67, 30.5 ,  0.42, 34.5 , 74.  ])"},"metadata":{}}]},{"cell_type":"code","source":"test_df['Age'].unique()","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:19:10.854914Z","iopub.execute_input":"2024-08-02T16:19:10.855336Z","iopub.status.idle":"2024-08-02T16:19:10.864452Z","shell.execute_reply.started":"2024-08-02T16:19:10.855302Z","shell.execute_reply":"2024-08-02T16:19:10.863286Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"array([34.5 , 47.  , 62.  , 27.  , 22.  , 14.  , 30.  , 26.  , 18.  ,\n       21.  ,   nan, 46.  , 23.  , 63.  , 24.  , 35.  , 45.  , 55.  ,\n        9.  , 48.  , 50.  , 22.5 , 41.  , 33.  , 18.5 , 25.  , 39.  ,\n       60.  , 36.  , 20.  , 28.  , 10.  , 17.  , 32.  , 13.  , 31.  ,\n       29.  , 28.5 , 32.5 ,  6.  , 67.  , 49.  ,  2.  , 76.  , 43.  ,\n       16.  ,  1.  , 12.  , 42.  , 53.  , 26.5 , 40.  , 61.  , 60.5 ,\n        7.  , 15.  , 54.  , 64.  , 37.  , 34.  , 11.5 ,  8.  ,  0.33,\n       38.  , 57.  , 40.5 ,  0.92, 19.  , 36.5 ,  0.75,  0.83, 58.  ,\n        0.17, 59.  , 14.5 , 44.  ,  5.  , 51.  ,  3.  , 38.5 ])"},"metadata":{}}]},{"cell_type":"code","source":"train_df['Age'].dtypes","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:19:11.651292Z","iopub.execute_input":"2024-08-02T16:19:11.652218Z","iopub.status.idle":"2024-08-02T16:19:11.662083Z","shell.execute_reply.started":"2024-08-02T16:19:11.652161Z","shell.execute_reply":"2024-08-02T16:19:11.660322Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"dtype('float64')"},"metadata":{}}]},{"cell_type":"code","source":"train_df['Age'].shape","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:19:12.611171Z","iopub.execute_input":"2024-08-02T16:19:12.611597Z","iopub.status.idle":"2024-08-02T16:19:12.620275Z","shell.execute_reply.started":"2024-08-02T16:19:12.611565Z","shell.execute_reply":"2024-08-02T16:19:12.618879Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"(891,)"},"metadata":{}}]},{"cell_type":"code","source":"test_df['Age'].shape","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:19:13.484919Z","iopub.execute_input":"2024-08-02T16:19:13.485313Z","iopub.status.idle":"2024-08-02T16:19:13.492322Z","shell.execute_reply.started":"2024-08-02T16:19:13.485282Z","shell.execute_reply":"2024-08-02T16:19:13.491151Z"},"trusted":true},"execution_count":16,"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"(418,)"},"metadata":{}}]},{"cell_type":"code","source":"def rounding_off_age(value):\n    if(value < 1.0):\n        return 1.0\n    else:\n        return value","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:19:14.425029Z","iopub.execute_input":"2024-08-02T16:19:14.425417Z","iopub.status.idle":"2024-08-02T16:19:14.432035Z","shell.execute_reply.started":"2024-08-02T16:19:14.425387Z","shell.execute_reply":"2024-08-02T16:19:14.430688Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"train_df['Age'] = train_df['Age'].apply(rounding_off_age)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:19:15.255778Z","iopub.execute_input":"2024-08-02T16:19:15.256178Z","iopub.status.idle":"2024-08-02T16:19:15.263038Z","shell.execute_reply.started":"2024-08-02T16:19:15.256147Z","shell.execute_reply":"2024-08-02T16:19:15.261799Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"test_df['Age'] = test_df['Age'].apply(rounding_off_age)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:19:18.455323Z","iopub.execute_input":"2024-08-02T16:19:18.455713Z","iopub.status.idle":"2024-08-02T16:19:18.462132Z","shell.execute_reply.started":"2024-08-02T16:19:18.455684Z","shell.execute_reply":"2024-08-02T16:19:18.460824Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"train_df.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:19:19.140284Z","iopub.execute_input":"2024-08-02T16:19:19.141854Z","iopub.status.idle":"2024-08-02T16:19:19.160534Z","shell.execute_reply.started":"2024-08-02T16:19:19.141801Z","shell.execute_reply":"2024-08-02T16:19:19.159432Z"},"trusted":true},"execution_count":20,"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_df.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:19:19.945205Z","iopub.execute_input":"2024-08-02T16:19:19.945884Z","iopub.status.idle":"2024-08-02T16:19:19.963596Z","shell.execute_reply.started":"2024-08-02T16:19:19.945850Z","shell.execute_reply":"2024-08-02T16:19:19.961914Z"},"trusted":true},"execution_count":21,"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Pclass                                          Name     Sex  \\\n0          892       3                              Kelly, Mr. James    male   \n1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n2          894       2                     Myles, Mr. Thomas Francis    male   \n3          895       3                              Wirz, Mr. Albert    male   \n4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n\n    Age  SibSp  Parch   Ticket     Fare Cabin Embarked  \n0  34.5      0      0   330911   7.8292   NaN        Q  \n1  47.0      1      0   363272   7.0000   NaN        S  \n2  62.0      0      0   240276   9.6875   NaN        Q  \n3  27.0      0      0   315154   8.6625   NaN        S  \n4  22.0      1      1  3101298  12.2875   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>3</td>\n      <td>Kelly, Mr. James</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330911</td>\n      <td>7.8292</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>3</td>\n      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>363272</td>\n      <td>7.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>2</td>\n      <td>Myles, Mr. Thomas Francis</td>\n      <td>male</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>240276</td>\n      <td>9.6875</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>3</td>\n      <td>Wirz, Mr. Albert</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>315154</td>\n      <td>8.6625</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>3</td>\n      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n      <td>female</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3101298</td>\n      <td>12.2875</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"def convert_age_column(value):\n    if(value != np.nan or value != None):\n        return int(value)\n    else:\n        return value","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:19:21.455888Z","iopub.execute_input":"2024-08-02T16:19:21.456913Z","iopub.status.idle":"2024-08-02T16:19:21.462488Z","shell.execute_reply.started":"2024-08-02T16:19:21.456877Z","shell.execute_reply":"2024-08-02T16:19:21.461114Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"train_df['Age'].mean()","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:19:25.535157Z","iopub.execute_input":"2024-08-02T16:19:25.536126Z","iopub.status.idle":"2024-08-02T16:19:25.544740Z","shell.execute_reply.started":"2024-08-02T16:19:25.536092Z","shell.execute_reply":"2024-08-02T16:19:25.543075Z"},"trusted":true},"execution_count":23,"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"29.701680672268907"},"metadata":{}}]},{"cell_type":"code","source":"train_df['Age'].median()","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:19:26.299914Z","iopub.execute_input":"2024-08-02T16:19:26.300331Z","iopub.status.idle":"2024-08-02T16:19:26.310551Z","shell.execute_reply.started":"2024-08-02T16:19:26.300300Z","shell.execute_reply":"2024-08-02T16:19:26.308956Z"},"trusted":true},"execution_count":24,"outputs":[{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"28.0"},"metadata":{}}]},{"cell_type":"markdown","source":"### Importing KNNImputer for imputing the missing values","metadata":{}},{"cell_type":"code","source":"from sklearn.impute import KNNImputer\nknn_imputer = KNNImputer(n_neighbors=3)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:19:28.530643Z","iopub.execute_input":"2024-08-02T16:19:28.531047Z","iopub.status.idle":"2024-08-02T16:19:29.059945Z","shell.execute_reply.started":"2024-08-02T16:19:28.531018Z","shell.execute_reply":"2024-08-02T16:19:29.058591Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"age_column = train_df[['Age']]\ntest_age_column = test_df[['Age']]","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:19:30.555744Z","iopub.execute_input":"2024-08-02T16:19:30.556180Z","iopub.status.idle":"2024-08-02T16:19:30.564487Z","shell.execute_reply.started":"2024-08-02T16:19:30.556143Z","shell.execute_reply":"2024-08-02T16:19:30.562492Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"age_imputed = knn_imputer.fit_transform(age_column)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:19:31.986364Z","iopub.execute_input":"2024-08-02T16:19:31.986852Z","iopub.status.idle":"2024-08-02T16:19:32.012023Z","shell.execute_reply.started":"2024-08-02T16:19:31.986818Z","shell.execute_reply":"2024-08-02T16:19:32.010852Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"age_imputed_test = knn_imputer.transform(test_age_column)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:19:33.025033Z","iopub.execute_input":"2024-08-02T16:19:33.025594Z","iopub.status.idle":"2024-08-02T16:19:33.038439Z","shell.execute_reply.started":"2024-08-02T16:19:33.025555Z","shell.execute_reply":"2024-08-02T16:19:33.037168Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"imputed_df_age = pd.DataFrame(age_imputed, columns=['Age'])","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:19:33.850669Z","iopub.execute_input":"2024-08-02T16:19:33.851159Z","iopub.status.idle":"2024-08-02T16:19:33.857247Z","shell.execute_reply.started":"2024-08-02T16:19:33.851124Z","shell.execute_reply":"2024-08-02T16:19:33.855923Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"imputed_test_df_age = pd.DataFrame(age_imputed_test, columns=['Age'])","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:19:34.707754Z","iopub.execute_input":"2024-08-02T16:19:34.708194Z","iopub.status.idle":"2024-08-02T16:19:34.715672Z","shell.execute_reply.started":"2024-08-02T16:19:34.708163Z","shell.execute_reply":"2024-08-02T16:19:34.713026Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"imputed_df_age","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:19:36.610309Z","iopub.execute_input":"2024-08-02T16:19:36.610737Z","iopub.status.idle":"2024-08-02T16:19:36.622878Z","shell.execute_reply.started":"2024-08-02T16:19:36.610706Z","shell.execute_reply":"2024-08-02T16:19:36.621684Z"},"trusted":true},"execution_count":31,"outputs":[{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"           Age\n0    22.000000\n1    38.000000\n2    26.000000\n3    35.000000\n4    35.000000\n..         ...\n886  27.000000\n887  19.000000\n888  29.701681\n889  26.000000\n890  32.000000\n\n[891 rows x 1 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>22.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>38.000000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>26.000000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>35.000000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>35.000000</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>886</th>\n      <td>27.000000</td>\n    </tr>\n    <tr>\n      <th>887</th>\n      <td>19.000000</td>\n    </tr>\n    <tr>\n      <th>888</th>\n      <td>29.701681</td>\n    </tr>\n    <tr>\n      <th>889</th>\n      <td>26.000000</td>\n    </tr>\n    <tr>\n      <th>890</th>\n      <td>32.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>891 rows × 1 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"imputed_test_df_age","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:19:37.460542Z","iopub.execute_input":"2024-08-02T16:19:37.460979Z","iopub.status.idle":"2024-08-02T16:19:37.476383Z","shell.execute_reply.started":"2024-08-02T16:19:37.460929Z","shell.execute_reply":"2024-08-02T16:19:37.474777Z"},"trusted":true},"execution_count":32,"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"           Age\n0    34.500000\n1    47.000000\n2    62.000000\n3    27.000000\n4    22.000000\n..         ...\n413  29.701681\n414  39.000000\n415  38.500000\n416  29.701681\n417  29.701681\n\n[418 rows x 1 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>34.500000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>47.000000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>62.000000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>27.000000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>22.000000</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>29.701681</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>39.000000</td>\n    </tr>\n    <tr>\n      <th>415</th>\n      <td>38.500000</td>\n    </tr>\n    <tr>\n      <th>416</th>\n      <td>29.701681</td>\n    </tr>\n    <tr>\n      <th>417</th>\n      <td>29.701681</td>\n    </tr>\n  </tbody>\n</table>\n<p>418 rows × 1 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"imputed_df_age['Age'] = imputed_df_age['Age'].astype(int)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:19:38.619923Z","iopub.execute_input":"2024-08-02T16:19:38.620376Z","iopub.status.idle":"2024-08-02T16:19:38.627522Z","shell.execute_reply.started":"2024-08-02T16:19:38.620344Z","shell.execute_reply":"2024-08-02T16:19:38.626128Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"code","source":"imputed_test_df_age['Age'] = imputed_test_df_age['Age'].astype(int)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:19:39.905079Z","iopub.execute_input":"2024-08-02T16:19:39.905514Z","iopub.status.idle":"2024-08-02T16:19:39.913592Z","shell.execute_reply.started":"2024-08-02T16:19:39.905484Z","shell.execute_reply":"2024-08-02T16:19:39.911974Z"},"trusted":true},"execution_count":34,"outputs":[]},{"cell_type":"code","source":"imputed_df_age","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:19:40.896526Z","iopub.execute_input":"2024-08-02T16:19:40.896941Z","iopub.status.idle":"2024-08-02T16:19:40.912495Z","shell.execute_reply.started":"2024-08-02T16:19:40.896911Z","shell.execute_reply":"2024-08-02T16:19:40.910581Z"},"trusted":true},"execution_count":35,"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"     Age\n0     22\n1     38\n2     26\n3     35\n4     35\n..   ...\n886   27\n887   19\n888   29\n889   26\n890   32\n\n[891 rows x 1 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>38</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>35</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>35</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>886</th>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>887</th>\n      <td>19</td>\n    </tr>\n    <tr>\n      <th>888</th>\n      <td>29</td>\n    </tr>\n    <tr>\n      <th>889</th>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>890</th>\n      <td>32</td>\n    </tr>\n  </tbody>\n</table>\n<p>891 rows × 1 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"imputed_test_df_age","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:19:42.129834Z","iopub.execute_input":"2024-08-02T16:19:42.130260Z","iopub.status.idle":"2024-08-02T16:19:42.143170Z","shell.execute_reply.started":"2024-08-02T16:19:42.130229Z","shell.execute_reply":"2024-08-02T16:19:42.141798Z"},"trusted":true},"execution_count":36,"outputs":[{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"     Age\n0     34\n1     47\n2     62\n3     27\n4     22\n..   ...\n413   29\n414   39\n415   38\n416   29\n417   29\n\n[418 rows x 1 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>34</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>47</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>62</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>29</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>39</td>\n    </tr>\n    <tr>\n      <th>415</th>\n      <td>38</td>\n    </tr>\n    <tr>\n      <th>416</th>\n      <td>29</td>\n    </tr>\n    <tr>\n      <th>417</th>\n      <td>29</td>\n    </tr>\n  </tbody>\n</table>\n<p>418 rows × 1 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train_df['Age'] = imputed_df_age['Age']","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:19:43.530856Z","iopub.execute_input":"2024-08-02T16:19:43.531373Z","iopub.status.idle":"2024-08-02T16:19:43.537912Z","shell.execute_reply.started":"2024-08-02T16:19:43.531337Z","shell.execute_reply":"2024-08-02T16:19:43.536609Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"test_df['Age'] = imputed_test_df_age['Age']","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:19:44.707621Z","iopub.execute_input":"2024-08-02T16:19:44.708075Z","iopub.status.idle":"2024-08-02T16:19:44.715902Z","shell.execute_reply.started":"2024-08-02T16:19:44.708042Z","shell.execute_reply":"2024-08-02T16:19:44.714562Z"},"trusted":true},"execution_count":38,"outputs":[]},{"cell_type":"code","source":"train_df.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:20:00.234624Z","iopub.execute_input":"2024-08-02T16:20:00.235162Z","iopub.status.idle":"2024-08-02T16:20:00.260750Z","shell.execute_reply.started":"2024-08-02T16:20:00.235126Z","shell.execute_reply":"2024-08-02T16:20:00.259109Z"},"trusted":true},"execution_count":39,"outputs":[{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex  Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male   22      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female   38      1   \n2                             Heikkinen, Miss. Laina  female   26      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female   35      1   \n4                           Allen, Mr. William Henry    male   35      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_df.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:20:01.281806Z","iopub.execute_input":"2024-08-02T16:20:01.282542Z","iopub.status.idle":"2024-08-02T16:20:01.302764Z","shell.execute_reply.started":"2024-08-02T16:20:01.282464Z","shell.execute_reply":"2024-08-02T16:20:01.301306Z"},"trusted":true},"execution_count":40,"outputs":[{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Pclass                                          Name     Sex  \\\n0          892       3                              Kelly, Mr. James    male   \n1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n2          894       2                     Myles, Mr. Thomas Francis    male   \n3          895       3                              Wirz, Mr. Albert    male   \n4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n\n   Age  SibSp  Parch   Ticket     Fare Cabin Embarked  \n0   34      0      0   330911   7.8292   NaN        Q  \n1   47      1      0   363272   7.0000   NaN        S  \n2   62      0      0   240276   9.6875   NaN        Q  \n3   27      0      0   315154   8.6625   NaN        S  \n4   22      1      1  3101298  12.2875   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>3</td>\n      <td>Kelly, Mr. James</td>\n      <td>male</td>\n      <td>34</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330911</td>\n      <td>7.8292</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>3</td>\n      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n      <td>female</td>\n      <td>47</td>\n      <td>1</td>\n      <td>0</td>\n      <td>363272</td>\n      <td>7.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>2</td>\n      <td>Myles, Mr. Thomas Francis</td>\n      <td>male</td>\n      <td>62</td>\n      <td>0</td>\n      <td>0</td>\n      <td>240276</td>\n      <td>9.6875</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>3</td>\n      <td>Wirz, Mr. Albert</td>\n      <td>male</td>\n      <td>27</td>\n      <td>0</td>\n      <td>0</td>\n      <td>315154</td>\n      <td>8.6625</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>3</td>\n      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n      <td>female</td>\n      <td>22</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3101298</td>\n      <td>12.2875</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train_df.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:20:02.514310Z","iopub.execute_input":"2024-08-02T16:20:02.514743Z","iopub.status.idle":"2024-08-02T16:20:02.525318Z","shell.execute_reply.started":"2024-08-02T16:20:02.514711Z","shell.execute_reply":"2024-08-02T16:20:02.523942Z"},"trusted":true},"execution_count":41,"outputs":[{"execution_count":41,"output_type":"execute_result","data":{"text/plain":"PassengerId      0\nSurvived         0\nPclass           0\nName             0\nSex              0\nAge              0\nSibSp            0\nParch            0\nTicket           0\nFare             0\nCabin          687\nEmbarked         2\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"test_df.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:20:03.934361Z","iopub.execute_input":"2024-08-02T16:20:03.935403Z","iopub.status.idle":"2024-08-02T16:20:03.945056Z","shell.execute_reply.started":"2024-08-02T16:20:03.935358Z","shell.execute_reply":"2024-08-02T16:20:03.943823Z"},"trusted":true},"execution_count":42,"outputs":[{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"PassengerId      0\nPclass           0\nName             0\nSex              0\nAge              0\nSibSp            0\nParch            0\nTicket           0\nFare             1\nCabin          327\nEmbarked         0\ndtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"## Cleaning the ` Cabin ` column","metadata":{}},{"cell_type":"code","source":"train_df['Cabin'].unique().size","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:20:06.452214Z","iopub.execute_input":"2024-08-02T16:20:06.452645Z","iopub.status.idle":"2024-08-02T16:20:06.460815Z","shell.execute_reply.started":"2024-08-02T16:20:06.452612Z","shell.execute_reply":"2024-08-02T16:20:06.459667Z"},"trusted":true},"execution_count":43,"outputs":[{"execution_count":43,"output_type":"execute_result","data":{"text/plain":"148"},"metadata":{}}]},{"cell_type":"code","source":"train_df['Cabin'].isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:20:08.011689Z","iopub.execute_input":"2024-08-02T16:20:08.012138Z","iopub.status.idle":"2024-08-02T16:20:08.023490Z","shell.execute_reply.started":"2024-08-02T16:20:08.012101Z","shell.execute_reply":"2024-08-02T16:20:08.022223Z"},"trusted":true},"execution_count":44,"outputs":[{"execution_count":44,"output_type":"execute_result","data":{"text/plain":"687"},"metadata":{}}]},{"cell_type":"markdown","source":"- So there is 148 unique values in the cabin column\n- And out of 891 values 687 are na values so we cannot drop them","metadata":{}},{"cell_type":"code","source":"corr_age_sur = train_df[['Age', 'Survived']].corr()","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:20:13.637373Z","iopub.execute_input":"2024-08-02T16:20:13.638730Z","iopub.status.idle":"2024-08-02T16:20:13.648250Z","shell.execute_reply.started":"2024-08-02T16:20:13.638684Z","shell.execute_reply":"2024-08-02T16:20:13.646379Z"},"trusted":true},"execution_count":45,"outputs":[]},{"cell_type":"code","source":"corr_age_sur","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:20:15.086281Z","iopub.execute_input":"2024-08-02T16:20:15.086777Z","iopub.status.idle":"2024-08-02T16:20:15.101000Z","shell.execute_reply.started":"2024-08-02T16:20:15.086741Z","shell.execute_reply":"2024-08-02T16:20:15.099390Z"},"trusted":true},"execution_count":46,"outputs":[{"execution_count":46,"output_type":"execute_result","data":{"text/plain":"               Age  Survived\nAge       1.000000 -0.067134\nSurvived -0.067134  1.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Age</th>\n      <td>1.000000</td>\n      <td>-0.067134</td>\n    </tr>\n    <tr>\n      <th>Survived</th>\n      <td>-0.067134</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train_df.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:20:22.561194Z","iopub.execute_input":"2024-08-02T16:20:22.561628Z","iopub.status.idle":"2024-08-02T16:20:22.581311Z","shell.execute_reply.started":"2024-08-02T16:20:22.561595Z","shell.execute_reply":"2024-08-02T16:20:22.579943Z"},"trusted":true},"execution_count":47,"outputs":[{"execution_count":47,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex  Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male   22      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female   38      1   \n2                             Heikkinen, Miss. Laina  female   26      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female   35      1   \n4                           Allen, Mr. William Henry    male   35      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train_df['Cabin'].unique()","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:20:23.399795Z","iopub.execute_input":"2024-08-02T16:20:23.400236Z","iopub.status.idle":"2024-08-02T16:20:23.410796Z","shell.execute_reply.started":"2024-08-02T16:20:23.400200Z","shell.execute_reply":"2024-08-02T16:20:23.408483Z"},"trusted":true},"execution_count":48,"outputs":[{"execution_count":48,"output_type":"execute_result","data":{"text/plain":"array([nan, 'C85', 'C123', 'E46', 'G6', 'C103', 'D56', 'A6',\n       'C23 C25 C27', 'B78', 'D33', 'B30', 'C52', 'B28', 'C83', 'F33',\n       'F G73', 'E31', 'A5', 'D10 D12', 'D26', 'C110', 'B58 B60', 'E101',\n       'F E69', 'D47', 'B86', 'F2', 'C2', 'E33', 'B19', 'A7', 'C49', 'F4',\n       'A32', 'B4', 'B80', 'A31', 'D36', 'D15', 'C93', 'C78', 'D35',\n       'C87', 'B77', 'E67', 'B94', 'C125', 'C99', 'C118', 'D7', 'A19',\n       'B49', 'D', 'C22 C26', 'C106', 'C65', 'E36', 'C54',\n       'B57 B59 B63 B66', 'C7', 'E34', 'C32', 'B18', 'C124', 'C91', 'E40',\n       'T', 'C128', 'D37', 'B35', 'E50', 'C82', 'B96 B98', 'E10', 'E44',\n       'A34', 'C104', 'C111', 'C92', 'E38', 'D21', 'E12', 'E63', 'A14',\n       'B37', 'C30', 'D20', 'B79', 'E25', 'D46', 'B73', 'C95', 'B38',\n       'B39', 'B22', 'C86', 'C70', 'A16', 'C101', 'C68', 'A10', 'E68',\n       'B41', 'A20', 'D19', 'D50', 'D9', 'A23', 'B50', 'A26', 'D48',\n       'E58', 'C126', 'B71', 'B51 B53 B55', 'D49', 'B5', 'B20', 'F G63',\n       'C62 C64', 'E24', 'C90', 'C45', 'E8', 'B101', 'D45', 'C46', 'D30',\n       'E121', 'D11', 'E77', 'F38', 'B3', 'D6', 'B82 B84', 'D17', 'A36',\n       'B102', 'B69', 'E49', 'C47', 'D28', 'E17', 'A24', 'C50', 'B42',\n       'C148'], dtype=object)"},"metadata":{}}]},{"cell_type":"markdown","source":"## According to Titanic's Architecture\n\n### First-Class Cabins\n- **Location**: The first-class cabins were primarily located on the upper decks of the ship, specifically on the Boat Deck, A Deck, B Deck, C Deck, and D Deck.\n- **Types**: There were a variety of first-class cabins, ranging from luxurious suites to single rooms. Some of the most opulent accommodations were the parlor suites, which included private promenades.\n- **Amenities**: First-class cabins were equipped with high-end furnishings, including private bathrooms, sitting areas, and other luxurious amenities.\n\n### Second-Class Cabins\n- **Location**: Second-class cabins were located primarily on the F Deck and E Deck, towards the middle of the ship.\n- **Types**: Second-class accommodations were comfortable but less luxurious than first-class. They included private cabins, which were often shared between two to four passengers.\n- **Amenities**: These cabins included basic amenities like sinks and shared bathrooms. They were more modestly furnished compared to first-class cabins.\n\n### Third-Class Cabins\n- **Location**: Third-class cabins were located on the lower decks of the ship, primarily on G Deck and F Deck, towards the bow and stern.\n- **Types**: Third-class cabins were dormitory-style accommodations with bunk beds, often shared by multiple passengers (sometimes up to ten).\n- **Amenities**: The amenities were basic, with shared bathrooms and minimal furnishings. These cabins were designed to accommodate a large number of emigrants.\n\n### Cabin Numbering and Identification\n- **Numbering System**: Cabins were numbered with a prefix indicating the deck followed by the cabin number (e.g., A23, B45).\n- **Decks**: The decks were named in descending order from top to bottom:\n  - Boat Deck (topmost)\n  - A Deck (Promenade Deck)\n  - B Deck (Bridge Deck)\n  - C Deck (Shelter Deck)\n  - D Deck (Saloon Deck)\n  - E Deck\n  - F Deck\n  - G Deck (lowest deck with passenger cabins)\n\n### Notable Features\n- **Parlor Suites**: These were the most luxurious accommodations, located on the upper decks, featuring private promenades and multiple rooms.\n- **Cabin Clusters**: Cabins were often grouped together by class, with first-class cabins being closer to the center of the ship and offering better views and access to amenities.\n- **Steerage**: The third-class or steerage accommodations were more crowded and located towards the ends of the ship, both fore and aft.","metadata":{}},{"cell_type":"markdown","source":"## So we can categorize them according their level(Top to Bottom)\n- **Decks**: The decks were named in descending order from top to bottom:\n  - Boat Deck (topmost)\n  - A Deck (Promenade Deck)\n  - B Deck (Bridge Deck)\n  - C Deck (Shelter Deck)\n  - D Deck (Saloon Deck)\n  - E Deck\n  - F Deck\n  - G Deck (lowest deck with passenger cabins)\n","metadata":{}},{"cell_type":"code","source":"def categorize_cabin_column(value):\n    if 'A' in value:\n        return 'A'\n    elif 'B' in value:\n        return 'B'\n    elif 'C' in value:\n        return 'C'\n    elif 'D' in value:\n        return 'D'\n    elif 'E' in value:\n        return 'E'\n    elif 'F' in value:\n        return 'F'\n    elif 'G' in value:\n        return 'G'\n    else:\n        return 'UNKNOWN'","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:20:26.031349Z","iopub.execute_input":"2024-08-02T16:20:26.031819Z","iopub.status.idle":"2024-08-02T16:20:26.039626Z","shell.execute_reply.started":"2024-08-02T16:20:26.031781Z","shell.execute_reply":"2024-08-02T16:20:26.037949Z"},"trusted":true},"execution_count":49,"outputs":[]},{"cell_type":"code","source":"train_df['Cabin'] = train_df['Cabin'].astype(str)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:20:26.625310Z","iopub.execute_input":"2024-08-02T16:20:26.625922Z","iopub.status.idle":"2024-08-02T16:20:26.635211Z","shell.execute_reply.started":"2024-08-02T16:20:26.625879Z","shell.execute_reply":"2024-08-02T16:20:26.633350Z"},"trusted":true},"execution_count":50,"outputs":[]},{"cell_type":"code","source":"train_df['Cabin'] = train_df['Cabin'].apply(categorize_cabin_column)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:20:27.170838Z","iopub.execute_input":"2024-08-02T16:20:27.171349Z","iopub.status.idle":"2024-08-02T16:20:27.179112Z","shell.execute_reply.started":"2024-08-02T16:20:27.171304Z","shell.execute_reply":"2024-08-02T16:20:27.177627Z"},"trusted":true},"execution_count":51,"outputs":[]},{"cell_type":"code","source":"test_df['Cabin'].dtypes","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:20:27.794672Z","iopub.execute_input":"2024-08-02T16:20:27.795117Z","iopub.status.idle":"2024-08-02T16:20:27.804154Z","shell.execute_reply.started":"2024-08-02T16:20:27.795086Z","shell.execute_reply":"2024-08-02T16:20:27.802670Z"},"trusted":true},"execution_count":52,"outputs":[{"execution_count":52,"output_type":"execute_result","data":{"text/plain":"dtype('O')"},"metadata":{}}]},{"cell_type":"code","source":"test_df['Cabin'] = test_df['Cabin'].astype(str)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:20:29.040309Z","iopub.execute_input":"2024-08-02T16:20:29.040737Z","iopub.status.idle":"2024-08-02T16:20:29.047688Z","shell.execute_reply.started":"2024-08-02T16:20:29.040707Z","shell.execute_reply":"2024-08-02T16:20:29.046290Z"},"trusted":true},"execution_count":53,"outputs":[]},{"cell_type":"code","source":"test_df['Cabin'] = test_df['Cabin'].apply(categorize_cabin_column)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:20:29.560680Z","iopub.execute_input":"2024-08-02T16:20:29.562007Z","iopub.status.idle":"2024-08-02T16:20:29.568296Z","shell.execute_reply.started":"2024-08-02T16:20:29.561962Z","shell.execute_reply":"2024-08-02T16:20:29.566691Z"},"trusted":true},"execution_count":54,"outputs":[]},{"cell_type":"code","source":"train_df.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:20:30.217008Z","iopub.execute_input":"2024-08-02T16:20:30.217526Z","iopub.status.idle":"2024-08-02T16:20:30.229084Z","shell.execute_reply.started":"2024-08-02T16:20:30.217478Z","shell.execute_reply":"2024-08-02T16:20:30.227535Z"},"trusted":true},"execution_count":55,"outputs":[{"execution_count":55,"output_type":"execute_result","data":{"text/plain":"PassengerId    0\nSurvived       0\nPclass         0\nName           0\nSex            0\nAge            0\nSibSp          0\nParch          0\nTicket         0\nFare           0\nCabin          0\nEmbarked       2\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"test_df.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:21:30.510825Z","iopub.execute_input":"2024-08-02T16:21:30.511222Z","iopub.status.idle":"2024-08-02T16:21:30.522933Z","shell.execute_reply.started":"2024-08-02T16:21:30.511194Z","shell.execute_reply":"2024-08-02T16:21:30.521574Z"},"trusted":true},"execution_count":59,"outputs":[{"execution_count":59,"output_type":"execute_result","data":{"text/plain":"PassengerId    0\nPclass         0\nName           0\nSex            0\nAge            0\nSibSp          0\nParch          0\nTicket         0\nFare           1\nCabin          0\nEmbarked       0\ndtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"### As we can see the embark column has very less number(2) of null values so we can drop them","metadata":{}},{"cell_type":"code","source":"train_df = train_df.dropna()","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:21:50.330235Z","iopub.execute_input":"2024-08-02T16:21:50.330684Z","iopub.status.idle":"2024-08-02T16:21:50.341783Z","shell.execute_reply.started":"2024-08-02T16:21:50.330651Z","shell.execute_reply":"2024-08-02T16:21:50.339926Z"},"trusted":true},"execution_count":61,"outputs":[]},{"cell_type":"code","source":"test_df.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:21:51.235266Z","iopub.execute_input":"2024-08-02T16:21:51.235701Z","iopub.status.idle":"2024-08-02T16:21:51.245826Z","shell.execute_reply.started":"2024-08-02T16:21:51.235671Z","shell.execute_reply":"2024-08-02T16:21:51.244581Z"},"trusted":true},"execution_count":62,"outputs":[{"execution_count":62,"output_type":"execute_result","data":{"text/plain":"PassengerId    0\nPclass         0\nName           0\nSex            0\nAge            0\nSibSp          0\nParch          0\nTicket         0\nFare           1\nCabin          0\nEmbarked       0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"train_df.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:20:56.141625Z","iopub.execute_input":"2024-08-02T16:20:56.142073Z","iopub.status.idle":"2024-08-02T16:20:56.150246Z","shell.execute_reply.started":"2024-08-02T16:20:56.142040Z","shell.execute_reply":"2024-08-02T16:20:56.148666Z"},"trusted":true},"execution_count":57,"outputs":[{"execution_count":57,"output_type":"execute_result","data":{"text/plain":"(891, 12)"},"metadata":{}}]},{"cell_type":"code","source":"test_df.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:22:31.436156Z","iopub.execute_input":"2024-08-02T16:22:31.436704Z","iopub.status.idle":"2024-08-02T16:22:31.448550Z","shell.execute_reply.started":"2024-08-02T16:22:31.436664Z","shell.execute_reply":"2024-08-02T16:22:31.447335Z"},"trusted":true},"execution_count":63,"outputs":[{"execution_count":63,"output_type":"execute_result","data":{"text/plain":"(418, 11)"},"metadata":{}}]},{"cell_type":"code","source":"backup = train_df","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:23:21.624872Z","iopub.execute_input":"2024-08-02T16:23:21.625283Z","iopub.status.idle":"2024-08-02T16:23:21.631902Z","shell.execute_reply.started":"2024-08-02T16:23:21.625255Z","shell.execute_reply":"2024-08-02T16:23:21.630438Z"},"trusted":true},"execution_count":64,"outputs":[]},{"cell_type":"code","source":"train_df['Ticket'].dtypes","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:23:22.210864Z","iopub.execute_input":"2024-08-02T16:23:22.212332Z","iopub.status.idle":"2024-08-02T16:23:22.222003Z","shell.execute_reply.started":"2024-08-02T16:23:22.212250Z","shell.execute_reply":"2024-08-02T16:23:22.220397Z"},"trusted":true},"execution_count":65,"outputs":[{"execution_count":65,"output_type":"execute_result","data":{"text/plain":"dtype('O')"},"metadata":{}}]},{"cell_type":"code","source":"train_df['Ticket'].unique()","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:23:23.331025Z","iopub.execute_input":"2024-08-02T16:23:23.331458Z","iopub.status.idle":"2024-08-02T16:23:23.343430Z","shell.execute_reply.started":"2024-08-02T16:23:23.331425Z","shell.execute_reply":"2024-08-02T16:23:23.341786Z"},"trusted":true},"execution_count":66,"outputs":[{"execution_count":66,"output_type":"execute_result","data":{"text/plain":"array(['A/5 21171', 'PC 17599', 'STON/O2. 3101282', '113803', '373450',\n       '330877', '17463', '349909', '347742', '237736', 'PP 9549',\n       '113783', 'A/5. 2151', '347082', '350406', '248706', '382652',\n       '244373', '345763', '2649', '239865', '248698', '330923', '113788',\n       '347077', '2631', '19950', '330959', '349216', 'PC 17601',\n       'PC 17569', '335677', 'C.A. 24579', 'PC 17604', '113789', '2677',\n       'A./5. 2152', '345764', '2651', '7546', '11668', '349253',\n       'SC/Paris 2123', '330958', 'S.C./A.4. 23567', '370371', '14311',\n       '2662', '349237', '3101295', 'A/4. 39886', 'PC 17572', '2926',\n       '113509', '19947', 'C.A. 31026', '2697', 'C.A. 34651', 'CA 2144',\n       '2669', '36973', '347088', 'PC 17605', '2661', 'C.A. 29395',\n       'S.P. 3464', '3101281', '315151', 'C.A. 33111', 'S.O.C. 14879',\n       '2680', '1601', '348123', '349208', '374746', '248738', '364516',\n       '345767', '345779', '330932', '113059', 'SO/C 14885', '3101278',\n       'W./C. 6608', 'SOTON/OQ 392086', '343275', '343276', '347466',\n       'W.E.P. 5734', 'C.A. 2315', '364500', '374910', 'PC 17754',\n       'PC 17759', '231919', '244367', '349245', '349215', '35281',\n       '7540', '3101276', '349207', '343120', '312991', '349249',\n       '371110', '110465', '2665', '324669', '4136', '2627',\n       'STON/O 2. 3101294', '370369', 'PC 17558', 'A4. 54510', '27267',\n       '370372', 'C 17369', '2668', '347061', '349241',\n       'SOTON/O.Q. 3101307', 'A/5. 3337', '228414', 'C.A. 29178',\n       'SC/PARIS 2133', '11752', '7534', 'PC 17593', '2678', '347081',\n       'STON/O2. 3101279', '365222', '231945', 'C.A. 33112', '350043',\n       '230080', '244310', 'S.O.P. 1166', '113776', 'A.5. 11206',\n       'A/5. 851', 'Fa 265302', 'PC 17597', '35851', 'SOTON/OQ 392090',\n       '315037', 'CA. 2343', '371362', 'C.A. 33595', '347068', '315093',\n       '363291', '113505', 'PC 17318', '111240', 'STON/O 2. 3101280',\n       '17764', '350404', '4133', 'PC 17595', '250653', 'LINE',\n       'SC/PARIS 2131', '230136', '315153', '113767', '370365', '111428',\n       '364849', '349247', '234604', '28424', '350046', 'PC 17610',\n       '368703', '4579', '370370', '248747', '345770', '3101264', '2628',\n       'A/5 3540', '347054', '2699', '367231', '112277',\n       'SOTON/O.Q. 3101311', 'F.C.C. 13528', 'A/5 21174', '250646',\n       '367229', '35273', 'STON/O2. 3101283', '243847', '11813',\n       'W/C 14208', 'SOTON/OQ 392089', '220367', '21440', '349234',\n       '19943', 'PP 4348', 'SW/PP 751', 'A/5 21173', '236171', '347067',\n       '237442', 'C.A. 29566', 'W./C. 6609', '26707', 'C.A. 31921',\n       '28665', 'SCO/W 1585', '367230', 'W./C. 14263',\n       'STON/O 2. 3101275', '2694', '19928', '347071', '250649', '11751',\n       '244252', '362316', '113514', 'A/5. 3336', '370129', '2650',\n       'PC 17585', '110152', 'PC 17755', '230433', '384461', '110413',\n       '112059', '382649', 'C.A. 17248', '347083', 'PC 17582', 'PC 17760',\n       '113798', '250644', 'PC 17596', '370375', '13502', '347073',\n       '239853', 'C.A. 2673', '336439', '347464', '345778', 'A/5. 10482',\n       '113056', '349239', '345774', '349206', '237798', '370373',\n       '19877', '11967', 'SC/Paris 2163', '349236', '349233', 'PC 17612',\n       '2693', '113781', '19988', '9234', '367226', '226593', 'A/5 2466',\n       '17421', 'PC 17758', 'P/PP 3381', 'PC 17485', '11767', 'PC 17608',\n       '250651', '349243', 'F.C.C. 13529', '347470', '29011', '36928',\n       '16966', 'A/5 21172', '349219', '234818', '345364', '28551',\n       '111361', '113043', 'PC 17611', '349225', '7598', '113784',\n       '248740', '244361', '229236', '248733', '31418', '386525',\n       'C.A. 37671', '315088', '7267', '113510', '2695', '2647', '345783',\n       '237671', '330931', '330980', 'SC/PARIS 2167', '2691',\n       'SOTON/O.Q. 3101310', 'C 7076', '110813', '2626', '14313',\n       'PC 17477', '11765', '3101267', '323951', 'C 7077', '113503',\n       '2648', '347069', 'PC 17757', '2653', 'STON/O 2. 3101293',\n       '349227', '27849', '367655', 'SC 1748', '113760', '350034',\n       '3101277', '350052', '350407', '28403', '244278', '240929',\n       'STON/O 2. 3101289', '341826', '4137', '315096', '28664', '347064',\n       '29106', '312992', '349222', '394140', 'STON/O 2. 3101269',\n       '343095', '28220', '250652', '28228', '345773', '349254',\n       'A/5. 13032', '315082', '347080', 'A/4. 34244', '2003', '250655',\n       '364851', 'SOTON/O.Q. 392078', '110564', '376564', 'SC/AH 3085',\n       'STON/O 2. 3101274', '13507', 'C.A. 18723', '345769', '347076',\n       '230434', '65306', '33638', '113794', '2666', '113786', '65303',\n       '113051', '17453', 'A/5 2817', '349240', '13509', '17464',\n       'F.C.C. 13531', '371060', '19952', '364506', '111320', '234360',\n       'A/S 2816', 'SOTON/O.Q. 3101306', '113792', '36209', '323592',\n       '315089', 'SC/AH Basle 541', '7553', '31027', '3460', '350060',\n       '3101298', '239854', 'A/5 3594', '4134', '11771', 'A.5. 18509',\n       '65304', 'SOTON/OQ 3101317', '113787', 'PC 17609', 'A/4 45380',\n       '36947', 'C.A. 6212', '350035', '315086', '364846', '330909',\n       '4135', '26360', '111427', 'C 4001', '382651', 'SOTON/OQ 3101316',\n       'PC 17473', 'PC 17603', '349209', '36967', 'C.A. 34260', '226875',\n       '349242', '12749', '349252', '2624', '2700', '367232',\n       'W./C. 14258', 'PC 17483', '3101296', '29104', '2641', '2690',\n       '315084', '113050', 'PC 17761', '364498', '13568', 'WE/P 5735',\n       '2908', '693', 'SC/PARIS 2146', '244358', '330979', '2620',\n       '347085', '113807', '11755', '345572', '372622', '349251',\n       '218629', 'SOTON/OQ 392082', 'SOTON/O.Q. 392087', 'A/4 48871',\n       '349205', '2686', '350417', 'S.W./PP 752', '11769', 'PC 17474',\n       '14312', 'A/4. 20589', '358585', '243880', '2689',\n       'STON/O 2. 3101286', '237789', '13049', '3411', '237565', '13567',\n       '14973', 'A./5. 3235', 'STON/O 2. 3101273', 'A/5 3902', '364848',\n       'SC/AH 29037', '248727', '2664', '349214', '113796', '364511',\n       '111426', '349910', '349246', '113804', 'SOTON/O.Q. 3101305',\n       '370377', '364512', '220845', '31028', '2659', '11753', '350029',\n       '54636', '36963', '219533', '349224', '334912', '27042', '347743',\n       '13214', '112052', '237668', 'STON/O 2. 3101292', '350050',\n       '349231', '13213', 'S.O./P.P. 751', 'CA. 2314', '349221', '8475',\n       '330919', '365226', '349223', '29751', '2623', '5727', '349210',\n       'STON/O 2. 3101285', '234686', '312993', 'A/5 3536', '19996',\n       '29750', 'F.C. 12750', 'C.A. 24580', '244270', '239856', '349912',\n       '342826', '4138', '330935', '6563', '349228', '350036', '24160',\n       '17474', '349256', '2672', '113800', '248731', '363592', '35852',\n       '348121', 'PC 17475', '36864', '350025', '223596', 'PC 17476',\n       'PC 17482', '113028', '7545', '250647', '348124', '34218', '36568',\n       '347062', '350048', '12233', '250643', '113806', '315094', '36866',\n       '236853', 'STON/O2. 3101271', '239855', '28425', '233639',\n       '349201', '349218', '16988', '376566', 'STON/O 2. 3101288',\n       '250648', '113773', '335097', '29103', '392096', '345780',\n       '349204', '350042', '29108', '363294', 'SOTON/O2 3101272', '2663',\n       '347074', '112379', '364850', '8471', '345781', '350047',\n       'S.O./P.P. 3', '2674', '29105', '347078', '383121', '36865',\n       '2687', '113501', 'W./C. 6607', 'SOTON/O.Q. 3101312', '374887',\n       '3101265', '12460', 'PC 17600', '349203', '28213', '17465',\n       '349244', '2685', '2625', '347089', '347063', '112050', '347087',\n       '248723', '3474', '28206', '364499', '112058', 'STON/O2. 3101290',\n       'S.C./PARIS 2079', 'C 7075', '315098', '19972', '368323', '367228',\n       '2671', '347468', '2223', 'PC 17756', '315097', '392092', '11774',\n       'SOTON/O2 3101287', '2683', '315090', 'C.A. 5547', '349213',\n       '347060', 'PC 17592', '392091', '113055', '2629', '350026',\n       '28134', '17466', '233866', '236852', 'SC/PARIS 2149', 'PC 17590',\n       '345777', '349248', '695', '345765', '2667', '349212', '349217',\n       '349257', '7552', 'C.A./SOTON 34068', 'SOTON/OQ 392076', '211536',\n       '112053', '111369', '370376'], dtype=object)"},"metadata":{}}]},{"cell_type":"code","source":"train_df['Ticket'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:23:25.235361Z","iopub.execute_input":"2024-08-02T16:23:25.235797Z","iopub.status.idle":"2024-08-02T16:23:25.249844Z","shell.execute_reply.started":"2024-08-02T16:23:25.235765Z","shell.execute_reply":"2024-08-02T16:23:25.248383Z"},"trusted":true},"execution_count":67,"outputs":[{"execution_count":67,"output_type":"execute_result","data":{"text/plain":"Ticket\n347082      7\nCA. 2343    7\n1601        7\n3101295     6\nCA 2144     6\n           ..\n9234        1\n19988       1\n2693        1\nPC 17612    1\n370376      1\nName: count, Length: 680, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"train_df.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:23:44.230371Z","iopub.execute_input":"2024-08-02T16:23:44.230911Z","iopub.status.idle":"2024-08-02T16:23:44.251630Z","shell.execute_reply.started":"2024-08-02T16:23:44.230876Z","shell.execute_reply":"2024-08-02T16:23:44.249868Z"},"trusted":true},"execution_count":68,"outputs":[{"execution_count":68,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex  Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male   22      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female   38      1   \n2                             Heikkinen, Miss. Laina  female   26      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female   35      1   \n4                           Allen, Mr. William Henry    male   35      0   \n\n   Parch            Ticket     Fare    Cabin Embarked  \n0      0         A/5 21171   7.2500  UNKNOWN        S  \n1      0          PC 17599  71.2833        C        C  \n2      0  STON/O2. 3101282   7.9250  UNKNOWN        S  \n3      0            113803  53.1000        C        S  \n4      0            373450   8.0500  UNKNOWN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"## Dropping unnecessary features","metadata":{}},{"cell_type":"code","source":"train_df = train_df.drop(['Name', 'Ticket'], axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:23:46.830543Z","iopub.execute_input":"2024-08-02T16:23:46.832110Z","iopub.status.idle":"2024-08-02T16:23:46.842067Z","shell.execute_reply.started":"2024-08-02T16:23:46.832052Z","shell.execute_reply":"2024-08-02T16:23:46.840623Z"},"trusted":true},"execution_count":69,"outputs":[]},{"cell_type":"code","source":"train_df.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:23:47.910210Z","iopub.execute_input":"2024-08-02T16:23:47.910708Z","iopub.status.idle":"2024-08-02T16:23:47.929083Z","shell.execute_reply.started":"2024-08-02T16:23:47.910671Z","shell.execute_reply":"2024-08-02T16:23:47.927909Z"},"trusted":true},"execution_count":70,"outputs":[{"execution_count":70,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass     Sex  Age  SibSp  Parch     Fare    Cabin  \\\n0            1         0       3    male   22      1      0   7.2500  UNKNOWN   \n1            2         1       1  female   38      1      0  71.2833        C   \n2            3         1       3  female   26      0      0   7.9250  UNKNOWN   \n3            4         1       1  female   35      1      0  53.1000        C   \n4            5         0       3    male   35      0      0   8.0500  UNKNOWN   \n\n  Embarked  \n0        S  \n1        C  \n2        S  \n3        S  \n4        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>C</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train_df = train_df.drop(['PassengerId'], axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:23:51.389859Z","iopub.execute_input":"2024-08-02T16:23:51.390276Z","iopub.status.idle":"2024-08-02T16:23:51.396971Z","shell.execute_reply.started":"2024-08-02T16:23:51.390246Z","shell.execute_reply":"2024-08-02T16:23:51.395731Z"},"trusted":true},"execution_count":71,"outputs":[]},{"cell_type":"code","source":"train_df","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:23:52.665611Z","iopub.execute_input":"2024-08-02T16:23:52.666115Z","iopub.status.idle":"2024-08-02T16:23:52.686294Z","shell.execute_reply.started":"2024-08-02T16:23:52.666078Z","shell.execute_reply":"2024-08-02T16:23:52.685202Z"},"trusted":true},"execution_count":72,"outputs":[{"execution_count":72,"output_type":"execute_result","data":{"text/plain":"     Survived  Pclass     Sex  Age  SibSp  Parch     Fare    Cabin Embarked\n0           0       3    male   22      1      0   7.2500  UNKNOWN        S\n1           1       1  female   38      1      0  71.2833        C        C\n2           1       3  female   26      0      0   7.9250  UNKNOWN        S\n3           1       1  female   35      1      0  53.1000        C        S\n4           0       3    male   35      0      0   8.0500  UNKNOWN        S\n..        ...     ...     ...  ...    ...    ...      ...      ...      ...\n886         0       2    male   27      0      0  13.0000  UNKNOWN        S\n887         1       1  female   19      0      0  30.0000        B        S\n888         0       3  female   29      1      2  23.4500  UNKNOWN        S\n889         1       1    male   26      0      0  30.0000        C        C\n890         0       3    male   32      0      0   7.7500  UNKNOWN        Q\n\n[889 rows x 9 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>C</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>886</th>\n      <td>0</td>\n      <td>2</td>\n      <td>male</td>\n      <td>27</td>\n      <td>0</td>\n      <td>0</td>\n      <td>13.0000</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>887</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>19</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>B</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>888</th>\n      <td>0</td>\n      <td>3</td>\n      <td>female</td>\n      <td>29</td>\n      <td>1</td>\n      <td>2</td>\n      <td>23.4500</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>889</th>\n      <td>1</td>\n      <td>1</td>\n      <td>male</td>\n      <td>26</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>C</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>890</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>32</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.7500</td>\n      <td>UNKNOWN</td>\n      <td>Q</td>\n    </tr>\n  </tbody>\n</table>\n<p>889 rows × 9 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:23:54.870621Z","iopub.execute_input":"2024-08-02T16:23:54.871639Z","iopub.status.idle":"2024-08-02T16:23:54.888543Z","shell.execute_reply.started":"2024-08-02T16:23:54.871587Z","shell.execute_reply":"2024-08-02T16:23:54.887206Z"},"trusted":true},"execution_count":73,"outputs":[{"execution_count":73,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Pclass                                          Name     Sex  \\\n0          892       3                              Kelly, Mr. James    male   \n1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n2          894       2                     Myles, Mr. Thomas Francis    male   \n3          895       3                              Wirz, Mr. Albert    male   \n4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n\n   Age  SibSp  Parch   Ticket     Fare    Cabin Embarked  \n0   34      0      0   330911   7.8292  UNKNOWN        Q  \n1   47      1      0   363272   7.0000  UNKNOWN        S  \n2   62      0      0   240276   9.6875  UNKNOWN        Q  \n3   27      0      0   315154   8.6625  UNKNOWN        S  \n4   22      1      1  3101298  12.2875  UNKNOWN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>3</td>\n      <td>Kelly, Mr. James</td>\n      <td>male</td>\n      <td>34</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330911</td>\n      <td>7.8292</td>\n      <td>UNKNOWN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>3</td>\n      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n      <td>female</td>\n      <td>47</td>\n      <td>1</td>\n      <td>0</td>\n      <td>363272</td>\n      <td>7.0000</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>2</td>\n      <td>Myles, Mr. Thomas Francis</td>\n      <td>male</td>\n      <td>62</td>\n      <td>0</td>\n      <td>0</td>\n      <td>240276</td>\n      <td>9.6875</td>\n      <td>UNKNOWN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>3</td>\n      <td>Wirz, Mr. Albert</td>\n      <td>male</td>\n      <td>27</td>\n      <td>0</td>\n      <td>0</td>\n      <td>315154</td>\n      <td>8.6625</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>3</td>\n      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n      <td>female</td>\n      <td>22</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3101298</td>\n      <td>12.2875</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_df = test_df.drop(['Name', 'Ticket'], axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:23:56.790223Z","iopub.execute_input":"2024-08-02T16:23:56.790624Z","iopub.status.idle":"2024-08-02T16:23:56.797216Z","shell.execute_reply.started":"2024-08-02T16:23:56.790596Z","shell.execute_reply":"2024-08-02T16:23:56.796052Z"},"trusted":true},"execution_count":74,"outputs":[]},{"cell_type":"code","source":"test_df = test_df.drop(['PassengerId'], axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:23:59.830205Z","iopub.execute_input":"2024-08-02T16:23:59.830676Z","iopub.status.idle":"2024-08-02T16:23:59.839413Z","shell.execute_reply.started":"2024-08-02T16:23:59.830640Z","shell.execute_reply":"2024-08-02T16:23:59.838062Z"},"trusted":true},"execution_count":75,"outputs":[]},{"cell_type":"code","source":"test_df.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:24:10.470374Z","iopub.execute_input":"2024-08-02T16:24:10.471429Z","iopub.status.idle":"2024-08-02T16:24:10.478884Z","shell.execute_reply.started":"2024-08-02T16:24:10.471390Z","shell.execute_reply":"2024-08-02T16:24:10.477569Z"},"trusted":true},"execution_count":77,"outputs":[{"execution_count":77,"output_type":"execute_result","data":{"text/plain":"(418, 8)"},"metadata":{}}]},{"cell_type":"code","source":"train_df","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:24:00.555028Z","iopub.execute_input":"2024-08-02T16:24:00.555491Z","iopub.status.idle":"2024-08-02T16:24:00.576423Z","shell.execute_reply.started":"2024-08-02T16:24:00.555456Z","shell.execute_reply":"2024-08-02T16:24:00.575076Z"},"trusted":true},"execution_count":76,"outputs":[{"execution_count":76,"output_type":"execute_result","data":{"text/plain":"     Survived  Pclass     Sex  Age  SibSp  Parch     Fare    Cabin Embarked\n0           0       3    male   22      1      0   7.2500  UNKNOWN        S\n1           1       1  female   38      1      0  71.2833        C        C\n2           1       3  female   26      0      0   7.9250  UNKNOWN        S\n3           1       1  female   35      1      0  53.1000        C        S\n4           0       3    male   35      0      0   8.0500  UNKNOWN        S\n..        ...     ...     ...  ...    ...    ...      ...      ...      ...\n886         0       2    male   27      0      0  13.0000  UNKNOWN        S\n887         1       1  female   19      0      0  30.0000        B        S\n888         0       3  female   29      1      2  23.4500  UNKNOWN        S\n889         1       1    male   26      0      0  30.0000        C        C\n890         0       3    male   32      0      0   7.7500  UNKNOWN        Q\n\n[889 rows x 9 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>C</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>886</th>\n      <td>0</td>\n      <td>2</td>\n      <td>male</td>\n      <td>27</td>\n      <td>0</td>\n      <td>0</td>\n      <td>13.0000</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>887</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>19</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>B</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>888</th>\n      <td>0</td>\n      <td>3</td>\n      <td>female</td>\n      <td>29</td>\n      <td>1</td>\n      <td>2</td>\n      <td>23.4500</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>889</th>\n      <td>1</td>\n      <td>1</td>\n      <td>male</td>\n      <td>26</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>C</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>890</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>32</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.7500</td>\n      <td>UNKNOWN</td>\n      <td>Q</td>\n    </tr>\n  </tbody>\n</table>\n<p>889 rows × 9 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_df","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:24:16.750340Z","iopub.execute_input":"2024-08-02T16:24:16.750780Z","iopub.status.idle":"2024-08-02T16:24:16.770905Z","shell.execute_reply.started":"2024-08-02T16:24:16.750747Z","shell.execute_reply":"2024-08-02T16:24:16.768664Z"},"trusted":true},"execution_count":78,"outputs":[{"execution_count":78,"output_type":"execute_result","data":{"text/plain":"     Pclass     Sex  Age  SibSp  Parch      Fare    Cabin Embarked\n0         3    male   34      0      0    7.8292  UNKNOWN        Q\n1         3  female   47      1      0    7.0000  UNKNOWN        S\n2         2    male   62      0      0    9.6875  UNKNOWN        Q\n3         3    male   27      0      0    8.6625  UNKNOWN        S\n4         3  female   22      1      1   12.2875  UNKNOWN        S\n..      ...     ...  ...    ...    ...       ...      ...      ...\n413       3    male   29      0      0    8.0500  UNKNOWN        S\n414       1  female   39      0      0  108.9000        C        C\n415       3    male   38      0      0    7.2500  UNKNOWN        S\n416       3    male   29      0      0    8.0500  UNKNOWN        S\n417       3    male   29      1      1   22.3583  UNKNOWN        C\n\n[418 rows x 8 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>male</td>\n      <td>34</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.8292</td>\n      <td>UNKNOWN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>female</td>\n      <td>47</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.0000</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>male</td>\n      <td>62</td>\n      <td>0</td>\n      <td>0</td>\n      <td>9.6875</td>\n      <td>UNKNOWN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>male</td>\n      <td>27</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.6625</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>female</td>\n      <td>22</td>\n      <td>1</td>\n      <td>1</td>\n      <td>12.2875</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>3</td>\n      <td>male</td>\n      <td>29</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>1</td>\n      <td>female</td>\n      <td>39</td>\n      <td>0</td>\n      <td>0</td>\n      <td>108.9000</td>\n      <td>C</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>415</th>\n      <td>3</td>\n      <td>male</td>\n      <td>38</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>416</th>\n      <td>3</td>\n      <td>male</td>\n      <td>29</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>417</th>\n      <td>3</td>\n      <td>male</td>\n      <td>29</td>\n      <td>1</td>\n      <td>1</td>\n      <td>22.3583</td>\n      <td>UNKNOWN</td>\n      <td>C</td>\n    </tr>\n  </tbody>\n</table>\n<p>418 rows × 8 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_df.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:24:22.245558Z","iopub.execute_input":"2024-08-02T16:24:22.245988Z","iopub.status.idle":"2024-08-02T16:24:22.258789Z","shell.execute_reply.started":"2024-08-02T16:24:22.245950Z","shell.execute_reply":"2024-08-02T16:24:22.257136Z"},"trusted":true},"execution_count":79,"outputs":[{"execution_count":79,"output_type":"execute_result","data":{"text/plain":"Pclass        int64\nSex          object\nAge           int64\nSibSp         int64\nParch         int64\nFare        float64\nCabin        object\nEmbarked     object\ndtype: object"},"metadata":{}}]},{"cell_type":"markdown","source":"# Plotting necessary plots to see the relationships and dependencies between different fetures and target","metadata":{}},{"cell_type":"markdown","source":"## Survival Rate by Passenger Class","metadata":{}},{"cell_type":"code","source":"sns.barplot(data=train_df, x=\"Pclass\", y=\"Survived\")\nplt.title('Survival Rate by Passenger Class')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-01T19:46:55.363829Z","iopub.execute_input":"2024-08-01T19:46:55.364178Z","iopub.status.idle":"2024-08-01T19:46:55.640261Z","shell.execute_reply.started":"2024-08-01T19:46:55.364149Z","shell.execute_reply":"2024-08-01T19:46:55.638932Z"},"trusted":true},"execution_count":468,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"## Survival Rate by Sex","metadata":{}},{"cell_type":"code","source":"sns.barplot(x='Sex', y='Survived', data=train_df)\nplt.title('Survival Rate by Sex')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-01T19:46:55.641804Z","iopub.execute_input":"2024-08-01T19:46:55.642267Z","iopub.status.idle":"2024-08-01T19:46:55.892346Z","shell.execute_reply.started":"2024-08-01T19:46:55.642225Z","shell.execute_reply":"2024-08-01T19:46:55.891062Z"},"trusted":true},"execution_count":469,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"plt.figure(figsize=(10, 6))\nsns.histplot(data=train_df, x='Age', hue='Survived', kde=True, bins=30)\nplt.title('Age Distribution by Survival')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-01T19:46:55.893985Z","iopub.execute_input":"2024-08-01T19:46:55.894433Z","iopub.status.idle":"2024-08-01T19:46:56.448717Z","shell.execute_reply.started":"2024-08-01T19:46:55.894393Z","shell.execute_reply":"2024-08-01T19:46:56.447505Z"},"trusted":true},"execution_count":470,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"## Survival Rate by Number of Siblings/Spouses (SibSp)","metadata":{}},{"cell_type":"code","source":"sns.barplot(x='SibSp', y='Survived', data=train_df)\nplt.title('Survival Rate by Number of Siblings/Spouses')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-01T19:46:56.450330Z","iopub.execute_input":"2024-08-01T19:46:56.451267Z","iopub.status.idle":"2024-08-01T19:46:56.886524Z","shell.execute_reply.started":"2024-08-01T19:46:56.451228Z","shell.execute_reply":"2024-08-01T19:46:56.885225Z"},"trusted":true},"execution_count":471,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"sns.barplot(x='Parch', y='Survived', data=train_df)\nplt.title('Survival Rate by Number of Parents/Children')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-01T19:46:56.888073Z","iopub.execute_input":"2024-08-01T19:46:56.888502Z","iopub.status.idle":"2024-08-01T19:46:57.267367Z","shell.execute_reply.started":"2024-08-01T19:46:56.888458Z","shell.execute_reply":"2024-08-01T19:46:57.265932Z"},"trusted":true},"execution_count":472,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"## Fare Distribution by Class and Survival","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(10, 6))\nsns.boxplot(x='Pclass', y='Fare', hue='Survived', data=train_df)\nplt.title('Fare Distribution by Class and Survival')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-01T19:46:57.278820Z","iopub.execute_input":"2024-08-01T19:46:57.279260Z","iopub.status.idle":"2024-08-01T19:46:57.632363Z","shell.execute_reply.started":"2024-08-01T19:46:57.279226Z","shell.execute_reply":"2024-08-01T19:46:57.631173Z"},"trusted":true},"execution_count":473,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"## Survival Rate by Port of Embarkation","metadata":{}},{"cell_type":"code","source":"sns.barplot(x='Embarked', y='Survived', data=train_df)\nplt.title('Survival Rate by Port of Embarkation')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-01T19:46:57.633856Z","iopub.execute_input":"2024-08-01T19:46:57.634219Z","iopub.status.idle":"2024-08-01T19:46:57.939229Z","shell.execute_reply.started":"2024-08-01T19:46:57.634189Z","shell.execute_reply":"2024-08-01T19:46:57.938123Z"},"trusted":true},"execution_count":474,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"## Pair Plot of Numerical Features","metadata":{}},{"cell_type":"code","source":"corr_matrix = train_df.corr(numeric_only=True)\nsns.heatmap(corr_matrix, annot=True, cmap='coolwarm')\nplt.title('Correlation Matrix')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-01T19:46:57.941240Z","iopub.execute_input":"2024-08-01T19:46:57.941561Z","iopub.status.idle":"2024-08-01T19:46:58.359032Z","shell.execute_reply.started":"2024-08-01T19:46:57.941533Z","shell.execute_reply":"2024-08-01T19:46:58.357911Z"},"trusted":true},"execution_count":475,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Model","metadata":{}},{"cell_type":"markdown","source":"## Data encoding and preprocessing","metadata":{}},{"cell_type":"markdown","source":"### Importing necessary libraries","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:24:31.512194Z","iopub.execute_input":"2024-08-02T16:24:31.512653Z","iopub.status.idle":"2024-08-02T16:24:31.742733Z","shell.execute_reply.started":"2024-08-02T16:24:31.512621Z","shell.execute_reply":"2024-08-02T16:24:31.741475Z"},"trusted":true},"execution_count":80,"outputs":[]},{"cell_type":"code","source":"x_train = train_df.drop(['Survived'], axis=1)\ny_train = train_df['Survived']","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:24:32.786834Z","iopub.execute_input":"2024-08-02T16:24:32.787252Z","iopub.status.idle":"2024-08-02T16:24:32.796065Z","shell.execute_reply.started":"2024-08-02T16:24:32.787222Z","shell.execute_reply":"2024-08-02T16:24:32.794427Z"},"trusted":true},"execution_count":81,"outputs":[]},{"cell_type":"code","source":"x_train.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:24:33.866792Z","iopub.execute_input":"2024-08-02T16:24:33.867218Z","iopub.status.idle":"2024-08-02T16:24:33.884800Z","shell.execute_reply.started":"2024-08-02T16:24:33.867184Z","shell.execute_reply":"2024-08-02T16:24:33.883397Z"},"trusted":true},"execution_count":82,"outputs":[{"execution_count":82,"output_type":"execute_result","data":{"text/plain":"   Pclass     Sex  Age  SibSp  Parch     Fare    Cabin Embarked\n0       3    male   22      1      0   7.2500  UNKNOWN        S\n1       1  female   38      1      0  71.2833        C        C\n2       3  female   26      0      0   7.9250  UNKNOWN        S\n3       1  female   35      1      0  53.1000        C        S\n4       3    male   35      0      0   8.0500  UNKNOWN        S","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>male</td>\n      <td>22</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>female</td>\n      <td>38</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>female</td>\n      <td>26</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>female</td>\n      <td>35</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>C</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>male</td>\n      <td>35</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"y_train.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:24:42.387997Z","iopub.execute_input":"2024-08-02T16:24:42.388469Z","iopub.status.idle":"2024-08-02T16:24:42.405682Z","shell.execute_reply.started":"2024-08-02T16:24:42.388438Z","shell.execute_reply":"2024-08-02T16:24:42.403155Z"},"trusted":true},"execution_count":83,"outputs":[{"execution_count":83,"output_type":"execute_result","data":{"text/plain":"0    0\n1    1\n2    1\n3    1\n4    0\nName: Survived, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"one_hot_encoder_cols = ['Cabin', 'Embarked', 'Sex']\nnumerical_cols = ['Pclass', 'Age', 'SibSp', 'Parch', 'Fare']","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:24:45.627841Z","iopub.execute_input":"2024-08-02T16:24:45.628299Z","iopub.status.idle":"2024-08-02T16:24:45.636298Z","shell.execute_reply.started":"2024-08-02T16:24:45.628267Z","shell.execute_reply":"2024-08-02T16:24:45.634543Z"},"trusted":true},"execution_count":84,"outputs":[]},{"cell_type":"code","source":"standard_scaler = StandardScaler()\nohe = OneHotEncoder(handle_unknown='ignore')","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:24:47.108236Z","iopub.execute_input":"2024-08-02T16:24:47.108825Z","iopub.status.idle":"2024-08-02T16:24:47.116592Z","shell.execute_reply.started":"2024-08-02T16:24:47.108777Z","shell.execute_reply":"2024-08-02T16:24:47.114443Z"},"trusted":true},"execution_count":85,"outputs":[]},{"cell_type":"code","source":"preprocessor = ColumnTransformer(\n    transformers=[\n        ('ohe', ohe, one_hot_encoder_cols),\n        ('standard_scaler', standard_scaler, numerical_cols)\n    ],\n    remainder='passthrough'\n)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:24:48.142407Z","iopub.execute_input":"2024-08-02T16:24:48.142931Z","iopub.status.idle":"2024-08-02T16:24:48.150711Z","shell.execute_reply.started":"2024-08-02T16:24:48.142894Z","shell.execute_reply":"2024-08-02T16:24:48.149002Z"},"trusted":true},"execution_count":86,"outputs":[]},{"cell_type":"code","source":"clf = XGBClassifier(use_label_encoder=False, eval_metric='logloss')","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:24:48.986734Z","iopub.execute_input":"2024-08-02T16:24:48.987186Z","iopub.status.idle":"2024-08-02T16:24:48.993742Z","shell.execute_reply.started":"2024-08-02T16:24:48.987144Z","shell.execute_reply":"2024-08-02T16:24:48.991589Z"},"trusted":true},"execution_count":87,"outputs":[]},{"cell_type":"code","source":"model = Pipeline(\n    steps=[\n        ('preprocessor', preprocessor),\n        ('classifier', clf)\n    ]\n)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:24:50.027000Z","iopub.execute_input":"2024-08-02T16:24:50.027437Z","iopub.status.idle":"2024-08-02T16:24:50.035637Z","shell.execute_reply.started":"2024-08-02T16:24:50.027403Z","shell.execute_reply":"2024-08-02T16:24:50.033275Z"},"trusted":true},"execution_count":88,"outputs":[]},{"cell_type":"code","source":"model.fit(x_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:24:59.907023Z","iopub.execute_input":"2024-08-02T16:24:59.907461Z","iopub.status.idle":"2024-08-02T16:25:00.105307Z","shell.execute_reply.started":"2024-08-02T16:24:59.907428Z","shell.execute_reply":"2024-08-02T16:25:00.104041Z"},"trusted":true},"execution_count":89,"outputs":[{"execution_count":89,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('preprocessor',\n                 ColumnTransformer(remainder='passthrough',\n                                   transformers=[('ohe',\n                                                  OneHotEncoder(handle_unknown='ignore'),\n                                                  ['Cabin', 'Embarked', 'Sex']),\n                                                 ('standard_scaler',\n                                                  StandardScaler(),\n                                                  ['Pclass', 'Age', 'SibSp',\n                                                   'Parch', 'Fare'])])),\n                ('classifier',\n                 XGBClassifier(base_score=None, booster=None, callbacks=None,\n                               colsample_bylevel=None, colsample_byn...\n                               feature_types=None, gamma=None, grow_policy=None,\n                               importance_type=None,\n                               interaction_constraints=None, learning_rate=None,\n                               max_bin=None, max_cat_threshold=None,\n                               max_cat_to_onehot=None, max_delta_step=None,\n                               max_depth=None, max_leaves=None,\n                               min_child_weight=None, missing=nan,\n                               monotone_constraints=None, multi_strategy=None,\n                               n_estimators=None, n_jobs=None,\n                               num_parallel_tree=None, random_state=None, ...))])","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n                                   transformers=[(&#x27;ohe&#x27;,\n                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),\n                                                  [&#x27;Cabin&#x27;, &#x27;Embarked&#x27;, &#x27;Sex&#x27;]),\n                                                 (&#x27;standard_scaler&#x27;,\n                                                  StandardScaler(),\n                                                  [&#x27;Pclass&#x27;, &#x27;Age&#x27;, &#x27;SibSp&#x27;,\n                                                   &#x27;Parch&#x27;, &#x27;Fare&#x27;])])),\n                (&#x27;classifier&#x27;,\n                 XGBClassifier(base_score=None, booster=None, callbacks=None,\n                               colsample_bylevel=None, colsample_byn...\n                               feature_types=None, gamma=None, grow_policy=None,\n                               importance_type=None,\n                               interaction_constraints=None, learning_rate=None,\n                               max_bin=None, max_cat_threshold=None,\n                               max_cat_to_onehot=None, max_delta_step=None,\n                               max_depth=None, max_leaves=None,\n                               min_child_weight=None, missing=nan,\n                               monotone_constraints=None, multi_strategy=None,\n                               n_estimators=None, n_jobs=None,\n                               num_parallel_tree=None, random_state=None, ...))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n                                   transformers=[(&#x27;ohe&#x27;,\n                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),\n                                                  [&#x27;Cabin&#x27;, &#x27;Embarked&#x27;, &#x27;Sex&#x27;]),\n                                                 (&#x27;standard_scaler&#x27;,\n                                                  StandardScaler(),\n                                                  [&#x27;Pclass&#x27;, &#x27;Age&#x27;, &#x27;SibSp&#x27;,\n                                                   &#x27;Parch&#x27;, &#x27;Fare&#x27;])])),\n                (&#x27;classifier&#x27;,\n                 XGBClassifier(base_score=None, booster=None, callbacks=None,\n                               colsample_bylevel=None, colsample_byn...\n                               feature_types=None, gamma=None, grow_policy=None,\n                               importance_type=None,\n                               interaction_constraints=None, learning_rate=None,\n                               max_bin=None, max_cat_threshold=None,\n                               max_cat_to_onehot=None, max_delta_step=None,\n                               max_depth=None, max_leaves=None,\n                               min_child_weight=None, missing=nan,\n                               monotone_constraints=None, multi_strategy=None,\n                               n_estimators=None, n_jobs=None,\n                               num_parallel_tree=None, random_state=None, ...))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">preprocessor: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n                  transformers=[(&#x27;ohe&#x27;, OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),\n                                 [&#x27;Cabin&#x27;, &#x27;Embarked&#x27;, &#x27;Sex&#x27;]),\n                                (&#x27;standard_scaler&#x27;, StandardScaler(),\n                                 [&#x27;Pclass&#x27;, &#x27;Age&#x27;, &#x27;SibSp&#x27;, &#x27;Parch&#x27;, &#x27;Fare&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">ohe</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Cabin&#x27;, &#x27;Embarked&#x27;, &#x27;Sex&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">standard_scaler</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Pclass&#x27;, &#x27;Age&#x27;, &#x27;SibSp&#x27;, &#x27;Parch&#x27;, &#x27;Fare&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">remainder</label><div class=\"sk-toggleable__content\"><pre>[]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">passthrough</label><div class=\"sk-toggleable__content\"><pre>passthrough</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=&#x27;logloss&#x27;,\n              feature_types=None, gamma=None, grow_policy=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=None, max_bin=None, max_cat_threshold=None,\n              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,\n              max_leaves=None, min_child_weight=None, missing=nan,\n              monotone_constraints=None, multi_strategy=None, n_estimators=None,\n              n_jobs=None, num_parallel_tree=None, random_state=None, ...)</pre></div></div></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"x_test = test_df","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:25:02.187205Z","iopub.execute_input":"2024-08-02T16:25:02.187651Z","iopub.status.idle":"2024-08-02T16:25:02.195012Z","shell.execute_reply.started":"2024-08-02T16:25:02.187618Z","shell.execute_reply":"2024-08-02T16:25:02.192661Z"},"trusted":true},"execution_count":90,"outputs":[]},{"cell_type":"code","source":"x_test","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:25:04.346929Z","iopub.execute_input":"2024-08-02T16:25:04.347361Z","iopub.status.idle":"2024-08-02T16:25:04.366339Z","shell.execute_reply.started":"2024-08-02T16:25:04.347330Z","shell.execute_reply":"2024-08-02T16:25:04.365037Z"},"trusted":true},"execution_count":91,"outputs":[{"execution_count":91,"output_type":"execute_result","data":{"text/plain":"     Pclass     Sex  Age  SibSp  Parch      Fare    Cabin Embarked\n0         3    male   34      0      0    7.8292  UNKNOWN        Q\n1         3  female   47      1      0    7.0000  UNKNOWN        S\n2         2    male   62      0      0    9.6875  UNKNOWN        Q\n3         3    male   27      0      0    8.6625  UNKNOWN        S\n4         3  female   22      1      1   12.2875  UNKNOWN        S\n..      ...     ...  ...    ...    ...       ...      ...      ...\n413       3    male   29      0      0    8.0500  UNKNOWN        S\n414       1  female   39      0      0  108.9000        C        C\n415       3    male   38      0      0    7.2500  UNKNOWN        S\n416       3    male   29      0      0    8.0500  UNKNOWN        S\n417       3    male   29      1      1   22.3583  UNKNOWN        C\n\n[418 rows x 8 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>male</td>\n      <td>34</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.8292</td>\n      <td>UNKNOWN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>female</td>\n      <td>47</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.0000</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>male</td>\n      <td>62</td>\n      <td>0</td>\n      <td>0</td>\n      <td>9.6875</td>\n      <td>UNKNOWN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>male</td>\n      <td>27</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.6625</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>female</td>\n      <td>22</td>\n      <td>1</td>\n      <td>1</td>\n      <td>12.2875</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>3</td>\n      <td>male</td>\n      <td>29</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>1</td>\n      <td>female</td>\n      <td>39</td>\n      <td>0</td>\n      <td>0</td>\n      <td>108.9000</td>\n      <td>C</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>415</th>\n      <td>3</td>\n      <td>male</td>\n      <td>38</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>416</th>\n      <td>3</td>\n      <td>male</td>\n      <td>29</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>417</th>\n      <td>3</td>\n      <td>male</td>\n      <td>29</td>\n      <td>1</td>\n      <td>1</td>\n      <td>22.3583</td>\n      <td>UNKNOWN</td>\n      <td>C</td>\n    </tr>\n  </tbody>\n</table>\n<p>418 rows × 8 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"y_test_pred = model.predict(x_test)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:25:08.347012Z","iopub.execute_input":"2024-08-02T16:25:08.347465Z","iopub.status.idle":"2024-08-02T16:25:08.364998Z","shell.execute_reply.started":"2024-08-02T16:25:08.347432Z","shell.execute_reply":"2024-08-02T16:25:08.364069Z"},"trusted":true},"execution_count":92,"outputs":[]},{"cell_type":"code","source":"y_test_pred[0:10]","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:25:10.468632Z","iopub.execute_input":"2024-08-02T16:25:10.469150Z","iopub.status.idle":"2024-08-02T16:25:10.479013Z","shell.execute_reply.started":"2024-08-02T16:25:10.469114Z","shell.execute_reply":"2024-08-02T16:25:10.477206Z"},"trusted":true},"execution_count":93,"outputs":[{"execution_count":93,"output_type":"execute_result","data":{"text/plain":"array([0, 0, 0, 0, 1, 0, 0, 0, 1, 0])"},"metadata":{}}]},{"cell_type":"code","source":"test_df","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:25:12.067274Z","iopub.execute_input":"2024-08-02T16:25:12.067754Z","iopub.status.idle":"2024-08-02T16:25:12.088837Z","shell.execute_reply.started":"2024-08-02T16:25:12.067720Z","shell.execute_reply":"2024-08-02T16:25:12.087473Z"},"trusted":true},"execution_count":94,"outputs":[{"execution_count":94,"output_type":"execute_result","data":{"text/plain":"     Pclass     Sex  Age  SibSp  Parch      Fare    Cabin Embarked\n0         3    male   34      0      0    7.8292  UNKNOWN        Q\n1         3  female   47      1      0    7.0000  UNKNOWN        S\n2         2    male   62      0      0    9.6875  UNKNOWN        Q\n3         3    male   27      0      0    8.6625  UNKNOWN        S\n4         3  female   22      1      1   12.2875  UNKNOWN        S\n..      ...     ...  ...    ...    ...       ...      ...      ...\n413       3    male   29      0      0    8.0500  UNKNOWN        S\n414       1  female   39      0      0  108.9000        C        C\n415       3    male   38      0      0    7.2500  UNKNOWN        S\n416       3    male   29      0      0    8.0500  UNKNOWN        S\n417       3    male   29      1      1   22.3583  UNKNOWN        C\n\n[418 rows x 8 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>male</td>\n      <td>34</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.8292</td>\n      <td>UNKNOWN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>female</td>\n      <td>47</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.0000</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>male</td>\n      <td>62</td>\n      <td>0</td>\n      <td>0</td>\n      <td>9.6875</td>\n      <td>UNKNOWN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>male</td>\n      <td>27</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.6625</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>female</td>\n      <td>22</td>\n      <td>1</td>\n      <td>1</td>\n      <td>12.2875</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>3</td>\n      <td>male</td>\n      <td>29</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>1</td>\n      <td>female</td>\n      <td>39</td>\n      <td>0</td>\n      <td>0</td>\n      <td>108.9000</td>\n      <td>C</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>415</th>\n      <td>3</td>\n      <td>male</td>\n      <td>38</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>416</th>\n      <td>3</td>\n      <td>male</td>\n      <td>29</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>UNKNOWN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>417</th>\n      <td>3</td>\n      <td>male</td>\n      <td>29</td>\n      <td>1</td>\n      <td>1</td>\n      <td>22.3583</td>\n      <td>UNKNOWN</td>\n      <td>C</td>\n    </tr>\n  </tbody>\n</table>\n<p>418 rows × 8 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"Survived = y_test_pred\nPassengerId = test_df_2['PassengerId']","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:25:17.097299Z","iopub.execute_input":"2024-08-02T16:25:17.098596Z","iopub.status.idle":"2024-08-02T16:25:17.104859Z","shell.execute_reply.started":"2024-08-02T16:25:17.098497Z","shell.execute_reply":"2024-08-02T16:25:17.103598Z"},"trusted":true},"execution_count":95,"outputs":[]},{"cell_type":"code","source":"submission = pd.DataFrame(PassengerId, columns=[\"PassengerId\"])","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:25:17.917659Z","iopub.execute_input":"2024-08-02T16:25:17.918313Z","iopub.status.idle":"2024-08-02T16:25:17.925919Z","shell.execute_reply.started":"2024-08-02T16:25:17.918253Z","shell.execute_reply":"2024-08-02T16:25:17.924743Z"},"trusted":true},"execution_count":96,"outputs":[]},{"cell_type":"code","source":"submission","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:25:23.276792Z","iopub.execute_input":"2024-08-02T16:25:23.277175Z","iopub.status.idle":"2024-08-02T16:25:23.289804Z","shell.execute_reply.started":"2024-08-02T16:25:23.277146Z","shell.execute_reply":"2024-08-02T16:25:23.288369Z"},"trusted":true},"execution_count":97,"outputs":[{"execution_count":97,"output_type":"execute_result","data":{"text/plain":"     PassengerId\n0            892\n1            893\n2            894\n3            895\n4            896\n..           ...\n413         1305\n414         1306\n415         1307\n416         1308\n417         1309\n\n[418 rows x 1 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>1305</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>1306</td>\n    </tr>\n    <tr>\n      <th>415</th>\n      <td>1307</td>\n    </tr>\n    <tr>\n      <th>416</th>\n      <td>1308</td>\n    </tr>\n    <tr>\n      <th>417</th>\n      <td>1309</td>\n    </tr>\n  </tbody>\n</table>\n<p>418 rows × 1 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_df_2 = pd.DataFrame(test_data)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:26:16.427006Z","iopub.execute_input":"2024-08-02T16:26:16.427464Z","iopub.status.idle":"2024-08-02T16:26:16.433815Z","shell.execute_reply.started":"2024-08-02T16:26:16.427418Z","shell.execute_reply":"2024-08-02T16:26:16.432195Z"},"trusted":true},"execution_count":99,"outputs":[]},{"cell_type":"code","source":"PassengerId = test_df_2['PassengerId']\nsubmission = pd.DataFrame(PassengerId, columns=[\"PassengerId\"])","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:26:17.576833Z","iopub.execute_input":"2024-08-02T16:26:17.577791Z","iopub.status.idle":"2024-08-02T16:26:17.584858Z","shell.execute_reply.started":"2024-08-02T16:26:17.577757Z","shell.execute_reply":"2024-08-02T16:26:17.583314Z"},"trusted":true},"execution_count":100,"outputs":[]},{"cell_type":"code","source":"submission['Survived'] = Survived","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:26:19.907094Z","iopub.execute_input":"2024-08-02T16:26:19.907656Z","iopub.status.idle":"2024-08-02T16:26:19.914109Z","shell.execute_reply.started":"2024-08-02T16:26:19.907622Z","shell.execute_reply":"2024-08-02T16:26:19.912925Z"},"trusted":true},"execution_count":101,"outputs":[]},{"cell_type":"code","source":"submission","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:26:21.267115Z","iopub.execute_input":"2024-08-02T16:26:21.267574Z","iopub.status.idle":"2024-08-02T16:26:21.284270Z","shell.execute_reply.started":"2024-08-02T16:26:21.267536Z","shell.execute_reply":"2024-08-02T16:26:21.281960Z"},"trusted":true},"execution_count":102,"outputs":[{"execution_count":102,"output_type":"execute_result","data":{"text/plain":"     PassengerId  Survived\n0            892         0\n1            893         0\n2            894         0\n3            895         0\n4            896         1\n..           ...       ...\n413         1305         0\n414         1306         1\n415         1307         0\n416         1308         0\n417         1309         1\n\n[418 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>1305</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>1306</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>415</th>\n      <td>1307</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>416</th>\n      <td>1308</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>417</th>\n      <td>1309</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>418 rows × 2 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"submission.to_csv(\"submission.csv\", index=None)","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:41:39.749437Z","iopub.execute_input":"2024-08-02T16:41:39.750895Z","iopub.status.idle":"2024-08-02T16:41:39.760168Z","shell.execute_reply.started":"2024-08-02T16:41:39.750834Z","shell.execute_reply":"2024-08-02T16:41:39.758353Z"},"trusted":true},"execution_count":105,"outputs":[]},{"cell_type":"code","source":"submission.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-02T16:41:41.833957Z","iopub.execute_input":"2024-08-02T16:41:41.834412Z","iopub.status.idle":"2024-08-02T16:41:41.842679Z","shell.execute_reply.started":"2024-08-02T16:41:41.834378Z","shell.execute_reply":"2024-08-02T16:41:41.841213Z"},"trusted":true},"execution_count":106,"outputs":[{"execution_count":106,"output_type":"execute_result","data":{"text/plain":"(418, 2)"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}